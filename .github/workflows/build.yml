name: Build VDB Converter

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-dev libboost-system-dev
          sudo apt-get install -y libtbb-dev libopenvdb-dev libblosc-dev
          sudo apt-get install -y libopenexr-dev zlib1g-dev

      - name: Configure and build C++ executable
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j$(nproc)
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Build Python package
        run: |
          python -m pip install .
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-cpp-artifacts
          path: build/convertvdb
      
      - name: Build Python wheel
        run: |
          python -m pip install build
          python -m build --wheel
      
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: linux-wheel
          path: dist/*.whl

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          brew install boost tbb blosc openexr zlib
          brew install openvdb
      
      - name: Configure and build C++ executable
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j$(sysctl -n hw.ncpu)
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Build Python package
        run: |
          python -m pip install .
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-cpp-artifacts
          path: build/convertvdb
      
      - name: Build Python wheel
        run: |
          python -m pip install build
          python -m build --wheel
      
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: macos-wheel
          path: dist/*.whl

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Install vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '33b22de4aa1fa9e4de5e5daa8ef24905e136cede'
      
      - name: Install dependencies with vcpkg
        run: |
          vcpkg install openvdb:x64-windows openexr:x64-windows tbb:x64-windows blosc:x64-windows zlib:x64-windows boost-system:x64-windows
      
      - name: Configure and build C++ executable
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          cmake --build . --config Release
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Modify setup.py for vcpkg
        shell: pwsh
        run: |
          $setupContent = Get-Content -Path setup.py -Raw
          $setupContent = $setupContent -replace "VCPKG_ROOT = .*", "VCPKG_ROOT = '${{ github.workspace }}/vcpkg'"
          Set-Content -Path setup.py -Value $setupContent
      
      - name: Create OpenEXR symlink if needed
        shell: pwsh
        run: |
          $includeDir = "${{ github.workspace }}/vcpkg/installed/x64-windows/include"
          $openExrDir = "$includeDir/OpenEXR"
          if (-not (Test-Path "$openExrDir/half.h") -and (Test-Path "$includeDir/half.h")) {
            New-Item -ItemType Directory -Force -Path $openExrDir
            New-Item -ItemType SymbolicLink -Path "$openExrDir/half.h" -Target "$includeDir/half.h"
          }
      
      - name: Build Python package
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}/vcpkg"
          $env:PATH += ";$env:VCPKG_ROOT/installed/x64-windows/bin"
          python -m pip install -v .
        shell: pwsh
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-cpp-artifacts
          path: build/Release/convertvdb.exe
      
      - name: Build Python wheel
        shell: pwsh
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}/vcpkg"
          $env:PATH += ";$env:VCPKG_ROOT/installed/x64-windows/bin"
          python -m pip install build
          python -m build --wheel
      
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: windows-wheel
          path: dist/*.whl

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-cpp-artifacts/*
            macos-cpp-artifacts/*
            windows-cpp-artifacts/*
            linux-wheel/*
            macos-wheel/*
            windows-wheel/*
          draft: false
          prerelease: false
name: Build VDB Converter

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          sudo apt-get install -y libboost-dev libboost-system-dev libboost-iostreams-dev
          sudo apt-get install -y libtbb-dev libblosc-dev
          sudo apt-get install -y libopenexr-dev zlib1g-dev
          # For Linux we'll use the bundled OpenVDB with X11 dev packages
          sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
          # Install pybind11
          sudo apt-get install -y python3-pybind11

      - name: Configure and build C++ executable
        run: |
          mkdir -p build
          cd build
          cmake ..
          make -j$(nproc)
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Build Python package
        run: |
          python -m pip install .
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-cpp-artifacts
          path: build/convertvdb

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          brew install boost tbb c-blosc openexr zlib
          # Install pybind11
          brew install pybind11
      
      - name: Configure and build C++ executable
        run: |
          mkdir -p build
          cd build
          # Explicitly set pybind11 path for CMake
          export PYBIND11_DIR=$(brew --prefix pybind11)
          cmake -DCMAKE_PREFIX_PATH="$PYBIND11_DIR" ..
          make -j$(sysctl -n hw.ncpu)
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Build Python package
        run: |
          python -m pip install .
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-cpp-artifacts
          path: build/convertvdb

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
        shell: cmd
      
      - name: Install dependencies with vcpkg
        run: |
          .\vcpkg\vcpkg install openvdb:x64-windows
          .\vcpkg\vcpkg install openexr:x64-windows
          .\vcpkg\vcpkg install tbb:x64-windows
          .\vcpkg\vcpkg install blosc:x64-windows
          .\vcpkg\vcpkg install zlib:x64-windows
          .\vcpkg\vcpkg install boost-system:x64-windows
          .\vcpkg\vcpkg install boost-iostreams:x64-windows
          .\vcpkg\vcpkg install pybind11:x64-windows
        shell: cmd
      
      - name: Configure and build C++ executable
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=%CD%\..\vcpkg\scripts\buildsystems\vcpkg.cmake
          cmake --build . --config Release
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools numpy pybind11
      
      - name: Build Python package
        run: |
          $env:VCPKG_ROOT = (Resolve-Path .\vcpkg).Path
          $env:PATH += ";$env:VCPKG_ROOT\installed\x64-windows\bin"
          
          python -m pip install -v .
        shell: pwsh
      
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-cpp-artifacts
          path: build\Release\convertvdb.exe